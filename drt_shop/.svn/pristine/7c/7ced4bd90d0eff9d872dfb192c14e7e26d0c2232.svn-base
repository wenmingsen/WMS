package com.csg.intshop.controller.mall;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.web.ErrorAttributes;
import org.springframework.boot.autoconfigure.web.ErrorController;
import org.springframework.boot.autoconfigure.web.ErrorProperties;
import org.springframework.boot.autoconfigure.web.ServerProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.springframework.web.servlet.ModelAndView;

import com.csg.intshop.util.ResultMapHelper;



/**
 * ExceptionController 积分商城自定义异常处理
 *
 * @author  李城
 * @since   1.0
 * @version 2018年03月27日 李城
 */

@Controller
@RequestMapping("error")
@EnableConfigurationProperties({ServerProperties.class})
public class ExceptionController  implements ErrorController{
    
	 private ErrorAttributes errorAttributes;
	 private Integer status404=404;
	 private Integer status500=500;
	 private String errorUrl="pages/error/error.html";
	  @Autowired
	  private ServerProperties serverProperties;
	 
	 
	  /**
	   * 初始化ExceptionController
	   * @param errorAttributes
	   */
	  @Autowired
	  public ExceptionController(ErrorAttributes errorAttributes) {
	    Assert.notNull(errorAttributes, "ErrorAttributes must not be null");
	    this.errorAttributes = errorAttributes;
	  }
	 
	  /**
	   * 获取错误编码
	   * @param request
	   * @return
	   */
	  private HttpStatus getStatus(HttpServletRequest request) {
	    
		  Integer statusCode = (Integer) request
	        .getAttribute("javax.servlet.error.status_code");
	    if (statusCode == null) {
	      return HttpStatus.INTERNAL_SERVER_ERROR;
	    }
	    try {
	      return HttpStatus.valueOf(statusCode);
	    }
	    catch (Exception ex) {
	      return HttpStatus.INTERNAL_SERVER_ERROR;
	    }
	  }
	

	@RequestMapping(produces = "text/html")
	public String error(HttpServletRequest request){
		/*HttpStatus status = getStatus(request);
		if(status.value()==status404){
			errorUrl="pages/error/404.html";
		}else if(status.value()==status500){
			errorUrl="pages/error/500.html";
		}*/
		return getErrorPath();
	}
	
	@RequestMapping
	@ResponseBody
	public  ResponseEntity<Map<String, Object>> errorAjax(HttpServletRequest request){
		HttpStatus status = getStatus(request);
		Map<String, Object> body = new HashMap<String,Object>();
		if(status.value()==status404){
            body=ResultMapHelper.error404();
			return new ResponseEntity<Map<String, Object>>(body, status);
		}else if(status.value()==status500){
			 body=ResultMapHelper.error500();
			 return new ResponseEntity<Map<String, Object>>(body, status);
		}
		return null;
	}

	
	@Override
	public String getErrorPath() {
		// TODO Auto-generated method stub
		return errorUrl;
	}
	
	/**
	   * Determine if the stacktrace attribute should be included.
	   * @param request the source request
	   * @param produces the media type produced (or {@code MediaType.ALL})
	   * @return if the stacktrace attribute should be included
	   */
	  protected boolean isIncludeStackTrace(HttpServletRequest request,MediaType produces) {
	    ErrorProperties.IncludeStacktrace include = this.serverProperties.getError().getIncludeStacktrace();
	    if (include == ErrorProperties.IncludeStacktrace.ALWAYS) {
	      return true;
	    }
	    if (include == ErrorProperties.IncludeStacktrace.ON_TRACE_PARAM) {
	      return getTraceParameter(request);
	    }
	    return false;
	  }
	  
	  /**
	   * 是否包含trace
	   * @param request
	   * @return
	   */
	  private boolean getTraceParameter(HttpServletRequest request) {
	    String parameter = request.getParameter("trace");
	    if (parameter == null) {
	      return false;
	    }
	    return !"false".equals(parameter.toLowerCase());
	  }
	  
	  /**
	   * 获取错误的信息
	   * @param request
	   * @param includeStackTrace
	   * @return
	   */
	  private Map<String, Object> getErrorAttributes(HttpServletRequest request,
	                          boolean includeStackTrace) {
	    RequestAttributes requestAttributes = new ServletRequestAttributes(request);
	    return this.errorAttributes.getErrorAttributes(requestAttributes,
	        includeStackTrace);
	  }
}
	

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.csg.statistics.mapper.DrtFinPoAccountMapper">
	<resultMap id="BaseResultMap" type="com.csg.statistics.entity.DrtFinPoAccount">
		<id column="PO_ACCOUNT_ID" property="poAccountId"></id>
		<result column="PO_ACCOUNT" property="poAccount" />
		<result column="PO_TOTAL_MONEY" property="poTotalMoney" />
		<result column="PO_EARNINGS_COMPUTING_MONEY" property="poEarningsComputingMoney" />
		<result column="CREATE_TIME" property="createTime" />
		<result column="ACCOUNT_ID" property="accountId" />
		<result column="PO_ACCOUNT_STATUS" property="poAccountStatus" />
		<result column="IS_AUTO_PAY" property="isAutoPay" />
		<result column="AUTO_PAY_TIME" property="autoPayTime" />
		<result column="TOTAL_EARNINGS" property="totalEarnings" />
		<result column="ELEC_USER_ID" property="elecUserId" />
	</resultMap>
	
	<sql id="BaseColumnList">
		PO_ACCOUNT_ID as poAccountId,
		PO_ACCOUNT as poAccount,
		PO_TOTAL_MONEY as poTotalMoney,
		PO_EARNINGS_COMPUTING_MONEY as poEarningsComputingMoney,
		CREATE_TIME as createTime,
		ACCOUNT_ID as accountId,
		PO_ACCOUNT_STATUS as poAccountStatus,
		IS_AUTO_PAY as isAutoPay,
		AUTO_PAY_TIME as autoPayTime,
		TOTAL_EARNINGS as totalEarnings,
		ELEC_USER_ID as elecUserId
	</sql>

	<sql id="BaseCustomQueryCondition">
		<if test="poAccountId != null">
			and PO_ACCOUNT_ID=#{poAccountId}
		</if>
		<if test="poAccount != null">
			and PO_ACCOUNT=#{poAccount}
		</if>
		<if test="poTotalMoney != null">
			and PO_TOTAL_MONEY=#{poTotalMoney}
		</if>
		<if test="poEarningsComputingMoney != null">
			and PO_EARNINGS_COMPUTING_MONEY=#{poEarningsComputingMoney}
		</if>
		<if test="createTime != null">
			and CREATE_TIME=#{createTime}
		</if>
		<if test="accountId != null">
			and ACCOUNT_ID=#{accountId}
		</if>
		<if test="poAccountStatus != null">
			and PO_ACCOUNT_STATUS=#{poAccountStatus}
		</if>
		<if test="isAutoPay != null">
			and IS_AUTO_PAY=#{isAutoPay}
		</if>
		<if test="autoPayTime != null">
			and AUTO_PAY_TIME=#{autoPayTime}
		</if>
		<if test="totalEarnings != null">
			and TOTAL_EARNINGS=#{totalEarnings}
		</if>
		<if test="elecUserId != null">
			and ELEC_USER_ID=#{elecUserId}
		</if>
	</sql>

	<insert id="insert" parameterType="com.csg.statistics.entity.DrtFinPoAccount" >
    	insert into drt_fin_po_account
    		(PO_ACCOUNT_ID, PO_ACCOUNT, PO_TOTAL_MONEY, PO_EARNINGS_COMPUTING_MONEY, CREATE_TIME, ACCOUNT_ID, PO_ACCOUNT_STATUS, IS_AUTO_PAY, AUTO_PAY_TIME, TOTAL_EARNINGS, ELEC_USER_ID) 
    	values
    		(#{poAccountId}, #{poAccount}, #{poTotalMoney}, #{poEarningsComputingMoney}, #{createTime}, #{accountId}, #{poAccountStatus}, #{isAutoPay}, #{autoPayTime}, #{totalEarnings}, #{elecUserId})
  	</insert>

  	<update id="update" parameterType="com.csg.statistics.entity.DrtFinPoAccount">
		update drt_fin_po_account set
		PO_ACCOUNT=#{poAccount}, PO_TOTAL_MONEY=#{poTotalMoney}, PO_EARNINGS_COMPUTING_MONEY=#{poEarningsComputingMoney}, CREATE_TIME=#{createTime}, ACCOUNT_ID=#{accountId}, PO_ACCOUNT_STATUS=#{poAccountStatus}, IS_AUTO_PAY=#{isAutoPay}, AUTO_PAY_TIME=#{autoPayTime}, TOTAL_EARNINGS=#{totalEarnings}, ELEC_USER_ID=#{elecUserId}
		where PO_ACCOUNT_ID = #{poAccountId}
	</update>

	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
	    select 
	    <include refid="BaseColumnList" />
	    from drt_fin_po_account
	    where 
			PO_ACCOUNT_ID = #{poAccountId}
  	</select>

  	<select id="selectList" resultMap="BaseResultMap" parameterType="com.csg.statistics.entity.DrtFinPoAccount">
	    select 
	    <include refid="BaseColumnList" />
	    from drt_fin_po_account
	    where 1=1
	    <include refid="BaseCustomQueryCondition" />
  	</select>
  	
  	<!-- 昨天用户ID分组的数据 -->
  	<select id="queryDrtFinPoAccount" resultMap="BaseResultMap" >
	SELECT <include refid="BaseColumnList" />
	FROM drt_fin_po_account 
	WHERE  create_time >= DATE_SUB(DATE(CURRENT_TIMESTAMP()), INTERVAL 1 DAY) AND  DATE(CURRENT_TIMESTAMP()) > create_time GROUP BY account_id
  	</select>


	
</mapper>